@version 3.36
@include scl.conf

# Syslog-ng configuration file, compatible with default Debian syslogd
# installation.

# First, set some global options.
options { chain_hostnames(off); flush_lines(0); use_dns(no); use_fqdn(no);
	  dns_cache(no); owner(root); group(adm); perm(0640);
	  stats_freq(0); bad_hostname(^gconfd$);frac_digits(3);  
};


########################
# Sources
########################
# This is the default behavior of sysklogd package
# Logs may come from unix stream, but not from another machine.
#
source s_src {
       system();
       internal();
};


source s_net1 { udp(ip(0.0.0.0) port(11514)); }; #TOSEE


destination d_amqp {
    amqp(
        vhost()
        host(127.0.0.1)
        username(test)
	password(test)
        port(5672)
        exchange(syslog)
        exchange-type(fanout)
        routing-key()
	frac-digits(3)
        #body(${FACILITY}${LEVEL}${ISODATE}${FULLHOST}${LOGHOST}${PROGRAM}${MSGID}${PID}${MSGHDR}${MESSAGE}${SOURCEIP}${RAWMSG}${DATA})
        body(${FACILITY}${LEVEL}${ISODATE}${MSEC}${FULLHOST}${LOGHOST}${PROGRAM}${MSGID}${PID}${MSGHDR}${MESSAGE}${SOURCEIP}${RAWMSG}${DATA})
        persistent(yes)
        value-pairs(
            scope(selected-macros nv-pairs sdata)
        )
    );
};


log { source(s_net1); destination(d_amqp); };


########################
# Destinations
########################
# First some standard logfile
#
destination d_auth { file(varlogauth.log); };
destination d_cron { file(varlogcron.log); };
destination d_daemon { file(varlogdaemon.log); };
destination d_kern { file(varlogkern.log); };
destination d_lpr { file(varloglpr.log); };
destination d_mail { file(varlogmail.log); };
destination d_syslog { file(varlogsyslog); };
destination d_user { file(varloguser.log); };
destination d_uucp { file(varloguucp.log); };

# This files are the log come from the mail subsystem.
#
destination d_mailinfo { file(varlogmail.info); };
destination d_mailwarn { file(varlogmail.warn); };
destination d_mailerr { file(varlogmail.err); };

# Logging for INN news system
#
destination d_newscrit { file(varlognewsnews.crit); };
destination d_newserr { file(varlognewsnews.err); };
destination d_newsnotice { file(varlognewsnews.notice); };

# Some 'catch-all' logfiles.
#
destination d_debug { file(varlogdebug); };
destination d_error { file(varlogerror); };
destination d_messages { file(varlogmessages); };

# The root's console.
#
destination d_console { usertty(root); };

# Virtual console.
#
destination d_console_all { file(`tty10`); };

# The named pipe devxconsole is for the nsole' utility.  To use it,
# you must invoke nsole' with the -file' option
#
#    $ xconsole -file devxconsole [...]
#
destination d_xconsole { pipe(devxconsole); };

# Send the messages to an other host
#
#destination d_net { tcp(127.0.0.1 port(1000) log_fifo_size(1000)); };

# Debian only
destination d_ppp { file(varlogppp.log); };

########################
# Filters
########################
# Here's come the filter options. With this rules, we can set which
# message go where.

filter f_dbg { level(debug); };
filter f_info { level(info); };
filter f_notice { level(notice); };
filter f_warn { level(warn); };
filter f_err { level(err); };
filter f_crit { level(crit .. emerg); };

filter f_debug { level(debug) and not facility(auth, authpriv, news, mail); };
filter f_error { level(err .. emerg) ; };
filter f_messages { level(info,notice,warn) and
                    not facility(auth,authpriv,cron,daemon,mail,news); };

filter f_auth { facility(auth, authpriv) and not filter(f_debug); };
filter f_cron { facility(cron) and not filter(f_debug); };
filter f_daemon { facility(daemon) and not filter(f_debug); };
filter f_kern { facility(kern) and not filter(f_debug); };
filter f_lpr { facility(lpr) and not filter(f_debug); };
filter f_local { facility(local0, local1, local3, local4, local5,
                        local6, local7) and not filter(f_debug); };
filter f_mail { facility(mail) and not filter(f_debug); };
filter f_news { facility(news) and not filter(f_debug); };
filter f_syslog3 { not facility(auth, authpriv, mail) and not filter(f_debug); };
filter f_user { facility(user) and not filter(f_debug); };
filter f_uucp { facility(uucp) and not filter(f_debug); };

filter f_cnews { level(notice, err, crit) and facility(news); };
filter f_cother { level(debug, info, notice, warn) or facility(daemon, mail); };

filter f_ppp { facility(local2) and not filter(f_debug); };
filter f_console { level(warn .. emerg); };

########################
# Log paths
########################
log { source(s_src); filter(f_auth); destination(d_auth); };
log { source(s_src); filter(f_cron); destination(d_cron); };
log { source(s_src); filter(f_daemon); destination(d_daemon); };
log { source(s_src); filter(f_kern); destination(d_kern); };
log { source(s_src); filter(f_lpr); destination(d_lpr); };
log { source(s_src); filter(f_syslog3); destination(d_syslog); };
log { source(s_src); filter(f_user); destination(d_user); };
log { source(s_src); filter(f_uucp); destination(d_uucp); };

log { source(s_src); filter(f_mail); destination(d_mail); };


log { source(s_src); filter(f_news); filter(f_crit); destination(d_newscrit); };
log { source(s_src); filter(f_news); filter(f_err); destination(d_newserr); };
log { source(s_src); filter(f_news); filter(f_notice); destination(d_newsnotice); };

log { source(s_src); filter(f_debug); destination(d_debug); };
log { source(s_src); filter(f_error); destination(d_error); };
log { source(s_src); filter(f_messages); destination(d_messages); };

log { source(s_src); filter(f_console); destination(d_console_all);
				    destination(d_xconsole); };
log { source(s_src); filter(f_crit); destination(d_console); };


log { source(s_net1); destination(d_console); };

log { source(s_net1); destination(d_messages); };

###
# Include all config files in etcsyslog-ngconf.d
###
@include etcsyslog-ngconf.d.conf
